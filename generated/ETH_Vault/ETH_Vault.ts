// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AssetRedeemedWithLeveragedToken extends ethereum.Event {
  get params(): AssetRedeemedWithLeveragedToken__Params {
    return new AssetRedeemedWithLeveragedToken__Params(this);
  }
}

export class AssetRedeemedWithLeveragedToken__Params {
  _event: AssetRedeemedWithLeveragedToken;

  constructor(event: AssetRedeemedWithLeveragedToken) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get leveragedTokenAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get assetAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get assetTokenPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get assetTokenPriceDecimals(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class AssetRedeemedWithPairs extends ethereum.Event {
  get params(): AssetRedeemedWithPairs__Params {
    return new AssetRedeemedWithPairs__Params(this);
  }
}

export class AssetRedeemedWithPairs__Params {
  _event: AssetRedeemedWithPairs;

  constructor(event: AssetRedeemedWithPairs) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get usbAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get leveragedTokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get assetAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get assetTokenPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get assetTokenPriceDecimals(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class AssetRedeemedWithUSB extends ethereum.Event {
  get params(): AssetRedeemedWithUSB__Params {
    return new AssetRedeemedWithUSB__Params(this);
  }
}

export class AssetRedeemedWithUSB__Params {
  _event: AssetRedeemedWithUSB;

  constructor(event: AssetRedeemedWithUSB) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get usbAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get assetAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get assetTokenPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get assetTokenPriceDecimals(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LeveragedTokenBurned extends ethereum.Event {
  get params(): LeveragedTokenBurned__Params {
    return new LeveragedTokenBurned__Params(this);
  }
}

export class LeveragedTokenBurned__Params {
  _event: LeveragedTokenBurned;

  constructor(event: LeveragedTokenBurned) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get leveragedTokenAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get assetTokenPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get assetTokenPriceDecimals(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LeveragedTokenMinted extends ethereum.Event {
  get params(): LeveragedTokenMinted__Params {
    return new LeveragedTokenMinted__Params(this);
  }
}

export class LeveragedTokenMinted__Params {
  _event: LeveragedTokenMinted;

  constructor(event: LeveragedTokenMinted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get assetTokenAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get leveragedTokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get assetTokenPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get assetTokenPriceDecimals(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class UpdateParamValue extends ethereum.Event {
  get params(): UpdateParamValue__Params {
    return new UpdateParamValue__Params(this);
  }
}

export class UpdateParamValue__Params {
  _event: UpdateParamValue;

  constructor(event: UpdateParamValue) {
    this._event = event;
  }

  get param(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UsbBurned extends ethereum.Event {
  get params(): UsbBurned__Params {
    return new UsbBurned__Params(this);
  }
}

export class UsbBurned__Params {
  _event: UsbBurned;

  constructor(event: UsbBurned) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get usbTokenAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get usbSharesAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get assetTokenPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get assetTokenPriceDecimals(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class UsbMinted extends ethereum.Event {
  get params(): UsbMinted__Params {
    return new UsbMinted__Params(this);
  }
}

export class UsbMinted__Params {
  _event: UsbMinted;

  constructor(event: UsbMinted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get assetTokenAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get usbTokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get usbSharesAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get assetTokenPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get assetTokenPriceDecimals(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class UsbToLeveragedTokens extends ethereum.Event {
  get params(): UsbToLeveragedTokens__Params {
    return new UsbToLeveragedTokens__Params(this);
  }
}

export class UsbToLeveragedTokens__Params {
  _event: UsbToLeveragedTokens;

  constructor(event: UsbToLeveragedTokens) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get usbAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get leveragedTokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get assetTokenPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get assetTokenPriceDecimals(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class YieldsSettlement extends ethereum.Event {
  get params(): YieldsSettlement__Params {
    return new YieldsSettlement__Params(this);
  }
}

export class YieldsSettlement__Params {
  _event: YieldsSettlement;

  constructor(event: YieldsSettlement) {
    this._event = event;
  }

  get usbYieldsAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get leveragedTokenYieldsAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ETH_Vault__assetTokenPriceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class ETH_Vault__vaultStateResultValue0Struct extends ethereum.Tuple {
  get M_ETH(): BigInt {
    return this[0].toBigInt();
  }

  get P_ETH(): BigInt {
    return this[1].toBigInt();
  }

  get P_ETH_DECIMALS(): BigInt {
    return this[2].toBigInt();
  }

  get M_USB_ETH(): BigInt {
    return this[3].toBigInt();
  }

  get M_ETHx(): BigInt {
    return this[4].toBigInt();
  }

  get aar(): BigInt {
    return this[5].toBigInt();
  }

  get AART(): BigInt {
    return this[6].toBigInt();
  }

  get AARS(): BigInt {
    return this[7].toBigInt();
  }

  get AARU(): BigInt {
    return this[8].toBigInt();
  }

  get AARC(): BigInt {
    return this[9].toBigInt();
  }

  get AARDecimals(): BigInt {
    return this[10].toBigInt();
  }

  get RateR(): BigInt {
    return this[11].toBigInt();
  }

  get AARBelowSafeLineTime(): BigInt {
    return this[12].toBigInt();
  }

  get AARBelowCircuitBreakerLineTime(): BigInt {
    return this[13].toBigInt();
  }

  get settingsDecimals(): BigInt {
    return this[14].toBigInt();
  }
}

export class ETH_Vault extends ethereum.SmartContract {
  static bind(address: Address): ETH_Vault {
    return new ETH_Vault("ETH_Vault", address);
  }

  AAR(): BigInt {
    let result = super.call("AAR", "AAR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_AAR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("AAR", "AAR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  AARBelowCircuitBreakerLineTime(): BigInt {
    let result = super.call(
      "AARBelowCircuitBreakerLineTime",
      "AARBelowCircuitBreakerLineTime():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_AARBelowCircuitBreakerLineTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "AARBelowCircuitBreakerLineTime",
      "AARBelowCircuitBreakerLineTime():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  AARBelowSafeLineTime(): BigInt {
    let result = super.call(
      "AARBelowSafeLineTime",
      "AARBelowSafeLineTime():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_AARBelowSafeLineTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "AARBelowSafeLineTime",
      "AARBelowSafeLineTime():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  AARDecimals(): BigInt {
    let result = super.call("AARDecimals", "AARDecimals():(uint256)", []);

    return result[0].toBigInt();
  }

  try_AARDecimals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("AARDecimals", "AARDecimals():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  assetToken(): Address {
    let result = super.call("assetToken", "assetToken():(address)", []);

    return result[0].toAddress();
  }

  try_assetToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("assetToken", "assetToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  assetTokenDecimals(): i32 {
    let result = super.call(
      "assetTokenDecimals",
      "assetTokenDecimals():(uint8)",
      [],
    );

    return result[0].toI32();
  }

  try_assetTokenDecimals(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "assetTokenDecimals",
      "assetTokenDecimals():(uint8)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  assetTokenPrice(): ETH_Vault__assetTokenPriceResult {
    let result = super.call(
      "assetTokenPrice",
      "assetTokenPrice():(uint256,uint256)",
      [],
    );

    return new ETH_Vault__assetTokenPriceResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_assetTokenPrice(): ethereum.CallResult<ETH_Vault__assetTokenPriceResult> {
    let result = super.tryCall(
      "assetTokenPrice",
      "assetTokenPrice():(uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ETH_Vault__assetTokenPriceResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  assetTokenPriceFeed(): Address {
    let result = super.call(
      "assetTokenPriceFeed",
      "assetTokenPriceFeed():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_assetTokenPriceFeed(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "assetTokenPriceFeed",
      "assetTokenPriceFeed():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  assetTotalAmount(): BigInt {
    let result = super.call(
      "assetTotalAmount",
      "assetTotalAmount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_assetTotalAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assetTotalAmount",
      "assetTotalAmount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getParamValue(param: Bytes): BigInt {
    let result = super.call(
      "getParamValue",
      "getParamValue(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param)],
    );

    return result[0].toBigInt();
  }

  try_getParamValue(param: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getParamValue",
      "getParamValue(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  leveragedToken(): Address {
    let result = super.call("leveragedToken", "leveragedToken():(address)", []);

    return result[0].toAddress();
  }

  try_leveragedToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "leveragedToken",
      "leveragedToken():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ptyPoolAboveAARU(): Address {
    let result = super.call(
      "ptyPoolAboveAARU",
      "ptyPoolAboveAARU():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_ptyPoolAboveAARU(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ptyPoolAboveAARU",
      "ptyPoolAboveAARU():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ptyPoolBelowAARS(): Address {
    let result = super.call(
      "ptyPoolBelowAARS",
      "ptyPoolBelowAARS():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_ptyPoolBelowAARS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ptyPoolBelowAARS",
      "ptyPoolBelowAARS():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  settings(): Address {
    let result = super.call("settings", "settings():(address)", []);

    return result[0].toAddress();
  }

  try_settings(): ethereum.CallResult<Address> {
    let result = super.tryCall("settings", "settings():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  usbToken(): Address {
    let result = super.call("usbToken", "usbToken():(address)", []);

    return result[0].toAddress();
  }

  try_usbToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("usbToken", "usbToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  usbTotalShares(): BigInt {
    let result = super.call("usbTotalShares", "usbTotalShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_usbTotalShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "usbTotalShares",
      "usbTotalShares():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usbTotalSupply(): BigInt {
    let result = super.call("usbTotalSupply", "usbTotalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_usbTotalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "usbTotalSupply",
      "usbTotalSupply():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultCalculator(): Address {
    let result = super.call(
      "vaultCalculator",
      "vaultCalculator():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_vaultCalculator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "vaultCalculator",
      "vaultCalculator():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vaultPhase(): i32 {
    let result = super.call("vaultPhase", "vaultPhase():(uint8)", []);

    return result[0].toI32();
  }

  try_vaultPhase(): ethereum.CallResult<i32> {
    let result = super.tryCall("vaultPhase", "vaultPhase():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  vaultState(): ETH_Vault__vaultStateResultValue0Struct {
    let result = super.call(
      "vaultState",
      "vaultState():((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [],
    );

    return changetype<ETH_Vault__vaultStateResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_vaultState(): ethereum.CallResult<ETH_Vault__vaultStateResultValue0Struct> {
    let result = super.tryCall(
      "vaultState",
      "vaultState():((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ETH_Vault__vaultStateResultValue0Struct>(value[0].toTuple()),
    );
  }

  wandProtocol(): Address {
    let result = super.call("wandProtocol", "wandProtocol():(address)", []);

    return result[0].toAddress();
  }

  try_wandProtocol(): ethereum.CallResult<Address> {
    let result = super.tryCall("wandProtocol", "wandProtocol():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _wandProtocol(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _settings(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _vaultCalculator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _assetToken_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _assetTokenPriceFeed_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _leveragedToken_(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get assetPoolParams(): Array<Bytes> {
    return this._call.inputValues[6].value.toBytesArray();
  }

  get assetPoolParamsValues(): Array<BigInt> {
    return this._call.inputValues[7].value.toBigIntArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class MintLeveragedTokensBelowAARSCall extends ethereum.Call {
  get inputs(): MintLeveragedTokensBelowAARSCall__Inputs {
    return new MintLeveragedTokensBelowAARSCall__Inputs(this);
  }

  get outputs(): MintLeveragedTokensBelowAARSCall__Outputs {
    return new MintLeveragedTokensBelowAARSCall__Outputs(this);
  }
}

export class MintLeveragedTokensBelowAARSCall__Inputs {
  _call: MintLeveragedTokensBelowAARSCall;

  constructor(call: MintLeveragedTokensBelowAARSCall) {
    this._call = call;
  }

  get assetAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintLeveragedTokensBelowAARSCall__Outputs {
  _call: MintLeveragedTokensBelowAARSCall;

  constructor(call: MintLeveragedTokensBelowAARSCall) {
    this._call = call;
  }
}

export class MintPairsAtAdjustmentPhaseCall extends ethereum.Call {
  get inputs(): MintPairsAtAdjustmentPhaseCall__Inputs {
    return new MintPairsAtAdjustmentPhaseCall__Inputs(this);
  }

  get outputs(): MintPairsAtAdjustmentPhaseCall__Outputs {
    return new MintPairsAtAdjustmentPhaseCall__Outputs(this);
  }
}

export class MintPairsAtAdjustmentPhaseCall__Inputs {
  _call: MintPairsAtAdjustmentPhaseCall;

  constructor(call: MintPairsAtAdjustmentPhaseCall) {
    this._call = call;
  }

  get assetAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintPairsAtAdjustmentPhaseCall__Outputs {
  _call: MintPairsAtAdjustmentPhaseCall;

  constructor(call: MintPairsAtAdjustmentPhaseCall) {
    this._call = call;
  }
}

export class MintPairsAtStabilityPhaseCall extends ethereum.Call {
  get inputs(): MintPairsAtStabilityPhaseCall__Inputs {
    return new MintPairsAtStabilityPhaseCall__Inputs(this);
  }

  get outputs(): MintPairsAtStabilityPhaseCall__Outputs {
    return new MintPairsAtStabilityPhaseCall__Outputs(this);
  }
}

export class MintPairsAtStabilityPhaseCall__Inputs {
  _call: MintPairsAtStabilityPhaseCall;

  constructor(call: MintPairsAtStabilityPhaseCall) {
    this._call = call;
  }

  get assetAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintPairsAtStabilityPhaseCall__Outputs {
  _call: MintPairsAtStabilityPhaseCall;

  constructor(call: MintPairsAtStabilityPhaseCall) {
    this._call = call;
  }
}

export class MintUSBAboveAARUCall extends ethereum.Call {
  get inputs(): MintUSBAboveAARUCall__Inputs {
    return new MintUSBAboveAARUCall__Inputs(this);
  }

  get outputs(): MintUSBAboveAARUCall__Outputs {
    return new MintUSBAboveAARUCall__Outputs(this);
  }
}

export class MintUSBAboveAARUCall__Inputs {
  _call: MintUSBAboveAARUCall;

  constructor(call: MintUSBAboveAARUCall) {
    this._call = call;
  }

  get assetAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintUSBAboveAARUCall__Outputs {
  _call: MintUSBAboveAARUCall;

  constructor(call: MintUSBAboveAARUCall) {
    this._call = call;
  }
}

export class RedeemByLeveragedTokenAboveAARUCall extends ethereum.Call {
  get inputs(): RedeemByLeveragedTokenAboveAARUCall__Inputs {
    return new RedeemByLeveragedTokenAboveAARUCall__Inputs(this);
  }

  get outputs(): RedeemByLeveragedTokenAboveAARUCall__Outputs {
    return new RedeemByLeveragedTokenAboveAARUCall__Outputs(this);
  }
}

export class RedeemByLeveragedTokenAboveAARUCall__Inputs {
  _call: RedeemByLeveragedTokenAboveAARUCall;

  constructor(call: RedeemByLeveragedTokenAboveAARUCall) {
    this._call = call;
  }

  get leveragedTokenAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemByLeveragedTokenAboveAARUCall__Outputs {
  _call: RedeemByLeveragedTokenAboveAARUCall;

  constructor(call: RedeemByLeveragedTokenAboveAARUCall) {
    this._call = call;
  }
}

export class RedeemByPairsWithExpectedLeveragedTokenAmountCall extends ethereum.Call {
  get inputs(): RedeemByPairsWithExpectedLeveragedTokenAmountCall__Inputs {
    return new RedeemByPairsWithExpectedLeveragedTokenAmountCall__Inputs(this);
  }

  get outputs(): RedeemByPairsWithExpectedLeveragedTokenAmountCall__Outputs {
    return new RedeemByPairsWithExpectedLeveragedTokenAmountCall__Outputs(this);
  }
}

export class RedeemByPairsWithExpectedLeveragedTokenAmountCall__Inputs {
  _call: RedeemByPairsWithExpectedLeveragedTokenAmountCall;

  constructor(call: RedeemByPairsWithExpectedLeveragedTokenAmountCall) {
    this._call = call;
  }

  get leveragedTokenAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemByPairsWithExpectedLeveragedTokenAmountCall__Outputs {
  _call: RedeemByPairsWithExpectedLeveragedTokenAmountCall;

  constructor(call: RedeemByPairsWithExpectedLeveragedTokenAmountCall) {
    this._call = call;
  }
}

export class RedeemByPairsWithExpectedUSBAmountCall extends ethereum.Call {
  get inputs(): RedeemByPairsWithExpectedUSBAmountCall__Inputs {
    return new RedeemByPairsWithExpectedUSBAmountCall__Inputs(this);
  }

  get outputs(): RedeemByPairsWithExpectedUSBAmountCall__Outputs {
    return new RedeemByPairsWithExpectedUSBAmountCall__Outputs(this);
  }
}

export class RedeemByPairsWithExpectedUSBAmountCall__Inputs {
  _call: RedeemByPairsWithExpectedUSBAmountCall;

  constructor(call: RedeemByPairsWithExpectedUSBAmountCall) {
    this._call = call;
  }

  get usbAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemByPairsWithExpectedUSBAmountCall__Outputs {
  _call: RedeemByPairsWithExpectedUSBAmountCall;

  constructor(call: RedeemByPairsWithExpectedUSBAmountCall) {
    this._call = call;
  }
}

export class RedeemByUsbBelowAARSCall extends ethereum.Call {
  get inputs(): RedeemByUsbBelowAARSCall__Inputs {
    return new RedeemByUsbBelowAARSCall__Inputs(this);
  }

  get outputs(): RedeemByUsbBelowAARSCall__Outputs {
    return new RedeemByUsbBelowAARSCall__Outputs(this);
  }
}

export class RedeemByUsbBelowAARSCall__Inputs {
  _call: RedeemByUsbBelowAARSCall;

  constructor(call: RedeemByUsbBelowAARSCall) {
    this._call = call;
  }

  get usbAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemByUsbBelowAARSCall__Outputs {
  _call: RedeemByUsbBelowAARSCall;

  constructor(call: RedeemByUsbBelowAARSCall) {
    this._call = call;
  }
}

export class SetPtyPoolsCall extends ethereum.Call {
  get inputs(): SetPtyPoolsCall__Inputs {
    return new SetPtyPoolsCall__Inputs(this);
  }

  get outputs(): SetPtyPoolsCall__Outputs {
    return new SetPtyPoolsCall__Outputs(this);
  }
}

export class SetPtyPoolsCall__Inputs {
  _call: SetPtyPoolsCall;

  constructor(call: SetPtyPoolsCall) {
    this._call = call;
  }

  get _ptyPoolBelowAARS(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ptyPoolAboveAARU(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetPtyPoolsCall__Outputs {
  _call: SetPtyPoolsCall;

  constructor(call: SetPtyPoolsCall) {
    this._call = call;
  }
}

export class UpdateParamValueCall extends ethereum.Call {
  get inputs(): UpdateParamValueCall__Inputs {
    return new UpdateParamValueCall__Inputs(this);
  }

  get outputs(): UpdateParamValueCall__Outputs {
    return new UpdateParamValueCall__Outputs(this);
  }
}

export class UpdateParamValueCall__Inputs {
  _call: UpdateParamValueCall;

  constructor(call: UpdateParamValueCall) {
    this._call = call;
  }

  get param(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateParamValueCall__Outputs {
  _call: UpdateParamValueCall;

  constructor(call: UpdateParamValueCall) {
    this._call = call;
  }
}

export class UsbToLeveragedTokensCall extends ethereum.Call {
  get inputs(): UsbToLeveragedTokensCall__Inputs {
    return new UsbToLeveragedTokensCall__Inputs(this);
  }

  get outputs(): UsbToLeveragedTokensCall__Outputs {
    return new UsbToLeveragedTokensCall__Outputs(this);
  }
}

export class UsbToLeveragedTokensCall__Inputs {
  _call: UsbToLeveragedTokensCall;

  constructor(call: UsbToLeveragedTokensCall) {
    this._call = call;
  }

  get usbAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UsbToLeveragedTokensCall__Outputs {
  _call: UsbToLeveragedTokensCall;

  constructor(call: UsbToLeveragedTokensCall) {
    this._call = call;
  }
}
