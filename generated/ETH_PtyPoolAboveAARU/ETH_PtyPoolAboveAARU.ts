// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class MatchedTokenPaid extends ethereum.Event {
  get params(): MatchedTokenPaid__Params {
    return new MatchedTokenPaid__Params(this);
  }
}

export class MatchedTokenPaid__Params {
  _event: MatchedTokenPaid;

  constructor(event: MatchedTokenPaid) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MatchedTokensAdded extends ethereum.Event {
  get params(): MatchedTokensAdded__Params {
    return new MatchedTokensAdded__Params(this);
  }
}

export class MatchedTokensAdded__Params {
  _event: MatchedTokensAdded;

  constructor(event: MatchedTokensAdded) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MatchingYieldsAdded extends ethereum.Event {
  get params(): MatchingYieldsAdded__Params {
    return new MatchingYieldsAdded__Params(this);
  }
}

export class MatchingYieldsAdded__Params {
  _event: MatchingYieldsAdded;

  constructor(event: MatchingYieldsAdded) {
    this._event = event;
  }

  get yields(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MatchingYieldsPaid extends ethereum.Event {
  get params(): MatchingYieldsPaid__Params {
    return new MatchingYieldsPaid__Params(this);
  }
}

export class MatchingYieldsPaid__Params {
  _event: MatchingYieldsPaid;

  constructor(event: MatchingYieldsPaid) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get yields(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakingYieldsAdded extends ethereum.Event {
  get params(): StakingYieldsAdded__Params {
    return new StakingYieldsAdded__Params(this);
  }
}

export class StakingYieldsAdded__Params {
  _event: StakingYieldsAdded;

  constructor(event: StakingYieldsAdded) {
    this._event = event;
  }

  get yields(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class StakingYieldsPaid extends ethereum.Event {
  get params(): StakingYieldsPaid__Params {
    return new StakingYieldsPaid__Params(this);
  }
}

export class StakingYieldsPaid__Params {
  _event: StakingYieldsPaid;

  constructor(event: StakingYieldsPaid) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get yields(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ETH_PtyPoolAboveAARU extends ethereum.SmartContract {
  static bind(address: Address): ETH_PtyPoolAboveAARU {
    return new ETH_PtyPoolAboveAARU("ETH_PtyPoolAboveAARU", address);
  }

  earnedMatchedToken(account: Address): BigInt {
    let result = super.call(
      "earnedMatchedToken",
      "earnedMatchedToken(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_earnedMatchedToken(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "earnedMatchedToken",
      "earnedMatchedToken(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  earnedMatchingYields(account: Address): BigInt {
    let result = super.call(
      "earnedMatchingYields",
      "earnedMatchingYields(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_earnedMatchingYields(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "earnedMatchingYields",
      "earnedMatchingYields(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  earnedStakingYields(account: Address): BigInt {
    let result = super.call(
      "earnedStakingYields",
      "earnedStakingYields(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_earnedStakingYields(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "earnedStakingYields",
      "earnedStakingYields(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAccruedMatchingYields(): BigInt {
    let result = super.call(
      "getAccruedMatchingYields",
      "getAccruedMatchingYields():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getAccruedMatchingYields(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAccruedMatchingYields",
      "getAccruedMatchingYields():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakingBalanceByShares(stakingShares: BigInt): BigInt {
    let result = super.call(
      "getStakingBalanceByShares",
      "getStakingBalanceByShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(stakingShares)],
    );

    return result[0].toBigInt();
  }

  try_getStakingBalanceByShares(
    stakingShares: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakingBalanceByShares",
      "getStakingBalanceByShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(stakingShares)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakingSharesByBalance(stakingBalance: BigInt): BigInt {
    let result = super.call(
      "getStakingSharesByBalance",
      "getStakingSharesByBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(stakingBalance)],
    );

    return result[0].toBigInt();
  }

  try_getStakingSharesByBalance(
    stakingBalance: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakingSharesByBalance",
      "getStakingSharesByBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(stakingBalance)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  machingYieldsToken(): Address {
    let result = super.call(
      "machingYieldsToken",
      "machingYieldsToken():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_machingYieldsToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "machingYieldsToken",
      "machingYieldsToken():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolType(): i32 {
    let result = super.call("poolType", "poolType():(uint8)", []);

    return result[0].toI32();
  }

  try_poolType(): ethereum.CallResult<i32> {
    let result = super.tryCall("poolType", "poolType():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  stakingToken(): Address {
    let result = super.call("stakingToken", "stakingToken():(address)", []);

    return result[0].toAddress();
  }

  try_stakingToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakingToken", "stakingToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakingYieldsToken(): Address {
    let result = super.call(
      "stakingYieldsToken",
      "stakingYieldsToken():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_stakingYieldsToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakingYieldsToken",
      "stakingYieldsToken():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  targetToken(): Address {
    let result = super.call("targetToken", "targetToken():(address)", []);

    return result[0].toAddress();
  }

  try_targetToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("targetToken", "targetToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalStakingBalance(): BigInt {
    let result = super.call(
      "totalStakingBalance",
      "totalStakingBalance():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalStakingBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakingBalance",
      "totalStakingBalance():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStakingShares(): BigInt {
    let result = super.call(
      "totalStakingShares",
      "totalStakingShares():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalStakingShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakingShares",
      "totalStakingShares():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userStakingBalance(account: Address): BigInt {
    let result = super.call(
      "userStakingBalance",
      "userStakingBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_userStakingBalance(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userStakingBalance",
      "userStakingBalance(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userStakingShares(account: Address): BigInt {
    let result = super.call(
      "userStakingShares",
      "userStakingShares(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_userStakingShares(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userStakingShares",
      "userStakingShares(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vault(): Address {
    let result = super.call("vault", "vault():(address)", []);

    return result[0].toAddress();
  }

  try_vault(): ethereum.CallResult<Address> {
    let result = super.tryCall("vault", "vault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _wandProtocol(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _vault_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _poolType(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _stakingYieldsToken_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _matchingYieldsToken_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddMatchingYieldsCall extends ethereum.Call {
  get inputs(): AddMatchingYieldsCall__Inputs {
    return new AddMatchingYieldsCall__Inputs(this);
  }

  get outputs(): AddMatchingYieldsCall__Outputs {
    return new AddMatchingYieldsCall__Outputs(this);
  }
}

export class AddMatchingYieldsCall__Inputs {
  _call: AddMatchingYieldsCall;

  constructor(call: AddMatchingYieldsCall) {
    this._call = call;
  }

  get yieldsAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddMatchingYieldsCall__Outputs {
  _call: AddMatchingYieldsCall;

  constructor(call: AddMatchingYieldsCall) {
    this._call = call;
  }
}

export class AddStakingYieldsCall extends ethereum.Call {
  get inputs(): AddStakingYieldsCall__Inputs {
    return new AddStakingYieldsCall__Inputs(this);
  }

  get outputs(): AddStakingYieldsCall__Outputs {
    return new AddStakingYieldsCall__Outputs(this);
  }
}

export class AddStakingYieldsCall__Inputs {
  _call: AddStakingYieldsCall;

  constructor(call: AddStakingYieldsCall) {
    this._call = call;
  }

  get yieldsAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddStakingYieldsCall__Outputs {
  _call: AddStakingYieldsCall;

  constructor(call: AddStakingYieldsCall) {
    this._call = call;
  }
}

export class ClaimAllCall extends ethereum.Call {
  get inputs(): ClaimAllCall__Inputs {
    return new ClaimAllCall__Inputs(this);
  }

  get outputs(): ClaimAllCall__Outputs {
    return new ClaimAllCall__Outputs(this);
  }
}

export class ClaimAllCall__Inputs {
  _call: ClaimAllCall;

  constructor(call: ClaimAllCall) {
    this._call = call;
  }
}

export class ClaimAllCall__Outputs {
  _call: ClaimAllCall;

  constructor(call: ClaimAllCall) {
    this._call = call;
  }
}

export class ExitCall extends ethereum.Call {
  get inputs(): ExitCall__Inputs {
    return new ExitCall__Inputs(this);
  }

  get outputs(): ExitCall__Outputs {
    return new ExitCall__Outputs(this);
  }
}

export class ExitCall__Inputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class ExitCall__Outputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class GetMatchingOutTokensCall extends ethereum.Call {
  get inputs(): GetMatchingOutTokensCall__Inputs {
    return new GetMatchingOutTokensCall__Inputs(this);
  }

  get outputs(): GetMatchingOutTokensCall__Outputs {
    return new GetMatchingOutTokensCall__Outputs(this);
  }
}

export class GetMatchingOutTokensCall__Inputs {
  _call: GetMatchingOutTokensCall;

  constructor(call: GetMatchingOutTokensCall) {
    this._call = call;
  }
}

export class GetMatchingOutTokensCall__Outputs {
  _call: GetMatchingOutTokensCall;

  constructor(call: GetMatchingOutTokensCall) {
    this._call = call;
  }
}

export class GetMatchingTokensAndYieldsCall extends ethereum.Call {
  get inputs(): GetMatchingTokensAndYieldsCall__Inputs {
    return new GetMatchingTokensAndYieldsCall__Inputs(this);
  }

  get outputs(): GetMatchingTokensAndYieldsCall__Outputs {
    return new GetMatchingTokensAndYieldsCall__Outputs(this);
  }
}

export class GetMatchingTokensAndYieldsCall__Inputs {
  _call: GetMatchingTokensAndYieldsCall;

  constructor(call: GetMatchingTokensAndYieldsCall) {
    this._call = call;
  }
}

export class GetMatchingTokensAndYieldsCall__Outputs {
  _call: GetMatchingTokensAndYieldsCall;

  constructor(call: GetMatchingTokensAndYieldsCall) {
    this._call = call;
  }
}

export class GetMatchingYieldsCall extends ethereum.Call {
  get inputs(): GetMatchingYieldsCall__Inputs {
    return new GetMatchingYieldsCall__Inputs(this);
  }

  get outputs(): GetMatchingYieldsCall__Outputs {
    return new GetMatchingYieldsCall__Outputs(this);
  }
}

export class GetMatchingYieldsCall__Inputs {
  _call: GetMatchingYieldsCall;

  constructor(call: GetMatchingYieldsCall) {
    this._call = call;
  }
}

export class GetMatchingYieldsCall__Outputs {
  _call: GetMatchingYieldsCall;

  constructor(call: GetMatchingYieldsCall) {
    this._call = call;
  }
}

export class GetStakingYieldsCall extends ethereum.Call {
  get inputs(): GetStakingYieldsCall__Inputs {
    return new GetStakingYieldsCall__Inputs(this);
  }

  get outputs(): GetStakingYieldsCall__Outputs {
    return new GetStakingYieldsCall__Outputs(this);
  }
}

export class GetStakingYieldsCall__Inputs {
  _call: GetStakingYieldsCall;

  constructor(call: GetStakingYieldsCall) {
    this._call = call;
  }
}

export class GetStakingYieldsCall__Outputs {
  _call: GetStakingYieldsCall;

  constructor(call: GetStakingYieldsCall) {
    this._call = call;
  }
}

export class NotifyMatchedAboveAARUCall extends ethereum.Call {
  get inputs(): NotifyMatchedAboveAARUCall__Inputs {
    return new NotifyMatchedAboveAARUCall__Inputs(this);
  }

  get outputs(): NotifyMatchedAboveAARUCall__Outputs {
    return new NotifyMatchedAboveAARUCall__Outputs(this);
  }
}

export class NotifyMatchedAboveAARUCall__Inputs {
  _call: NotifyMatchedAboveAARUCall;

  constructor(call: NotifyMatchedAboveAARUCall) {
    this._call = call;
  }

  get assetAmountMatched(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get usbSharesReceived(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class NotifyMatchedAboveAARUCall__Outputs {
  _call: NotifyMatchedAboveAARUCall;

  constructor(call: NotifyMatchedAboveAARUCall) {
    this._call = call;
  }
}

export class NotifyMatchedBelowAARSCall extends ethereum.Call {
  get inputs(): NotifyMatchedBelowAARSCall__Inputs {
    return new NotifyMatchedBelowAARSCall__Inputs(this);
  }

  get outputs(): NotifyMatchedBelowAARSCall__Outputs {
    return new NotifyMatchedBelowAARSCall__Outputs(this);
  }
}

export class NotifyMatchedBelowAARSCall__Inputs {
  _call: NotifyMatchedBelowAARSCall;

  constructor(call: NotifyMatchedBelowAARSCall) {
    this._call = call;
  }

  get assetAmountAdded(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class NotifyMatchedBelowAARSCall__Outputs {
  _call: NotifyMatchedBelowAARSCall;

  constructor(call: NotifyMatchedBelowAARSCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
